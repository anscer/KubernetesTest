apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
  namespace: default
  labels:
    app: mongo
spec:
  serviceName: mongodb-service
  replicas: 3
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: mongo
        image: mongo:6.0
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
        # env:
        #   - name: MONGO_INITDB_ROOT_USERNAME
        #     valueFrom:
        #       secretKeyRef:
        #         name: mongo-secret
        #         key: MONGO_USER
        #   - name: MONGO_INITDB_ROOT_PASSWORD
        #     valueFrom:
        #       secretKeyRef:
        #         name: mongo-secret
        #         key: MONGO_PASS
        #   - name: STATEFULSET_NAME
        #     valueFrom:
        #       fieldRef:
        #         fieldPath: metadata.name
        command:
          - mongod 
          - "--bind_ip_all"
          # - "--keyFile"
          # - "/etc/mongo/mongo-keyfile"
          - "--replSet"
          - anya-rs
        # command:
        #   - "bash"
        #   - "-c"
        #   #the default cache size guidance is: "50% of RAM minus 1 GB, or 256 MB"
        #   # Which is why the wired tiger cache size is this way. This assumes 2gb of memory
        #   # on the host machine. The plan is to change 0.25 to a calculated value
        #   # by passing an environment variable that contains the host machines memory
        #   # and automatically "personalizing" mongo to the machine its running on
        #   - |
        #     mongod --wiredTigerCacheSizeGB 0.25 --bind_ip_all \
        #     --keyFile /etc/mongo/mongo-keyfile \
        #     --replSet anya-rs \
        #     --fork --logpath /var/log/mongod.log \
        #     &&
        #     if [ $STATEFULSET_NAME == "mongo-0" ];
        #     then
        #       initiated=0
        #       replica_exists=false
        #       while [ "$replica_exists" != true ]
        #       do
        #         # Need to check to make sure that the other pods are currently up
        #         initiated=`mongosh --quiet --eval 'rs.initiate({_id: "anya-rs", version: 1, members: [
        #                { _id: 0, host : "mongo-0.mongodb-service:27017" },
        #                { _id: 1, host : "mongo-1.mongodb-service:27017" },
        #                { _id: 2, host : "mongo-2.mongodb-service:27017" }
        #          ]})["ok"]'`;
        #         replica_exists=`mongosh --quiet --eval 'db.isMaster()["ismaster"]'`;
        #          # Shit we need to check rs status i think instead
        #         echo "Replica exists: " $replica_exists;
        #         sleep 2
        #       done
        #       # If everything else is workign then we need to create an admin user
        #       mongosh --eval "db.getSiblingDB('admin').createUser({
        #             user : \"$MONGO_USER\",
        #             pwd  : \"$MONGO_PASSWORD\",
        #             roles: [ { role: 'root', db: 'admin' } ]
        #       });"
        #       echo "STATEFULSET_NAME: $STATEFULSET_NAME \n MACHINE_MEMORY: $MACHINE_MEMORY";
        #     fi
        ports:
          - containerPort: 27017
            name: mongo
        volumeMounts:
          # - name: mongo-config
          #   mountPath: /etc/mongo/mongo-config.yaml
          #   subPath: mongo-config.yaml
          - name: mongo-pvc
            mountPath: /data/db
          # - name: mongo-keyfile
          #   mountPath: /etc/mongo/mongo-keyfile
          #   subPath: mongo-keyfile
      restartPolicy: Always
      # volumes:
        # - name: mongo-config
        #   configMap:
        #     name: mongo-config
        #     items:
        #       - key: mongo-config.yaml
        #         path: mongo-config.yaml
        # - name: mongo-pvc
        #   persistentVolumeClaim:
        #     claimName: mongo-pvc
        # - name: mongo-keyfile
        #   secret:
        #     secretName: mongo-keyfile
        #     defaultMode: 256
        #     items:
        #       - key: mongo-keyfile
        #         path: mongo-keyfile
  volumeClaimTemplates:
    - metadata:
        name: mongo-pvc
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
